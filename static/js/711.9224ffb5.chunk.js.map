{"version":3,"file":"static/js/711.9224ffb5.chunk.js","mappings":"2MAKMA,EAAY,SAAH,GAA0B,IAApBC,EAAY,EAAZA,aACnB,GAA4BC,EAAAA,EAAAA,WAAS,GAAM,eAApCC,EAAM,KAAEC,EAAS,KACxB,GAA0BF,EAAAA,EAAAA,UAAS,IAAG,eAA/BG,EAAK,KAAEC,EAAQ,KAGhBC,EAAc,WAAH,OAASH,GAAU,EAAO,EAQ3C,OACE,4BACE,mBAAQI,UAAU,eAAeC,QAXlB,WAAH,OAASL,GAAU,EAAM,EAWgB,SAAC,uBAGrDD,IACC,gBAAKK,UAAU,aAAaE,GAAG,YAAW,UACxC,kBAAMF,UAAU,iBAAiBG,SAbpB,SAACC,GACpBA,EAAEC,iBACFZ,EAAaa,OAAOT,IACpBE,GACF,EASgE,WACtD,wBAAI,sBACJ,4BACE,uBAAG,4BAEL,kBACEQ,KAAK,SACLC,YAAY,aACZX,MAAOA,EACPY,SAvBS,SAACL,GAAC,OAAKN,EAASM,EAAEM,OAAOb,MAAO,EAwBzCc,UAAQ,KAEV,mBAAQJ,KAAK,SAASP,UAAU,MAAK,SAAC,YAGtC,mBAAQA,UAAU,gBAAgBC,QAASF,EAAY,SAAC,kBAQpE,EAwEA,EAtEkB,WAChB,IACA,GAAgCL,EAAAA,EAAAA,UADR,KACiC,eAAlDkB,EAAQ,KAAEC,EAAW,KAC5B,GAAkCnB,EAAAA,EAAAA,UAAS,IAAG,eAAvCoB,EAAS,KAAEC,EAAY,KA4C9B,OA1CAC,EAAAA,EAAAA,YAAU,YAIV,SAAwBC,GACtB,IAAMC,EAAeC,MAAMC,KAAK,CAAEC,OAAQJ,IAAQ,SAACK,EAAGC,GAAK,MAAM,CAC/DrB,GAAIqB,EACJC,MAAO,qBACR,IAEDT,EAAaG,EACf,CAVEO,CAAeb,EACjB,GAAG,CAACA,KAyCF,iBAAKZ,UAAU,4BAA2B,WACxC,wBAAI,2BACJ,iBAAKA,UAAU,UAAS,WACtB,gBAAKA,UAAU,qBAAoB,SAChCc,EAAUY,KAAI,SAACC,GAAI,OAClB,gBAEE3B,UAAU,UACV4B,MAAO,CAAEC,gBAAiBF,EAAKH,OAC/BM,aAAc,kBAvC1B,SAA0B5B,GACxB,IAAM6B,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBE,EAAIJ,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBG,EAAQ,cAAUN,EAAC,aAAKI,EAAC,aAAKC,EAAC,KAErCrB,GAAa,SAACuB,GAAS,OACrBA,EAAUZ,KAAI,SAACC,GAAI,OACjBA,EAAKzB,KAAOA,GAAE,kBAAQyB,GAAI,IAAEH,MAAOa,IAAaV,CAAI,GACrD,GAEL,CA4BgCY,CAAiBZ,EAAKzB,GAAG,GAHxCyB,EAAKzB,GAIV,OAGN,SAACV,EAAS,CAACC,aA9BjB,SAAsB+C,GACpB,GAAIA,GAAW,EAEb,OADAC,QAAQC,IAAI,+CACL,EAGP7B,EADoB2B,EAAUA,EAGlC,KAuBM,mBAAQxC,UAAU,cAAcC,QArBtC,WACEc,GAAa,SAACuB,GAAS,OACrBA,EAAUZ,KAAI,SAACC,GAAI,yBAAWA,GAAI,IAAEH,MAAO,sBAAoB,GAAI,GAEvE,EAiByD,SAAC,sBAM5D,C","sources":["components/Pages/Projects/SketchApp/SketchApp.js"],"sourcesContent":["// @ts-nocheck\nimport React, { useState, useEffect } from 'react';\n\nimport './styles.scss';\n\nconst FormPopup = ({ resizeSketch }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [value, setValue] = useState('');\n\n  const handleOpen = () => setIsOpen(true);\n  const handleClose = () => setIsOpen(false);\n  const handleChange = (e) => setValue(e.target.value);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    resizeSketch(Number(value));\n    handleClose();\n  };\n\n  return (\n    <div>\n      <button className='resizeButton' onClick={handleOpen}>\n        Restart and Resize\n      </button>\n      {isOpen && (\n        <div className='form-popup' id='popupForm'>\n          <form className='form-container' onSubmit={handleSubmit}>\n            <h1>Change Grid Size</h1>\n            <label>\n              <b>Enter new grid size:</b>\n            </label>\n            <input\n              type='number'\n              placeholder='Enter Size'\n              value={value}\n              onChange={handleChange}\n              required\n            />\n            <button type='submit' className='btn'>\n              Resize\n            </button>\n            <button className='btn btnCancel' onClick={handleClose}>\n              Cancel\n            </button>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst SketchApp = () => {\n  const initialGridSize = 256;\n  const [gridSize, setGridSize] = useState(initialGridSize);\n  const [gridItems, setGridItems] = useState([]);\n\n  useEffect(() => {\n    createGridSize(gridSize);\n  }, [gridSize]);\n\n  function createGridSize(size) {\n    const newGridItems = Array.from({ length: size }, (_, index) => ({\n      id: index,\n      color: 'rgb(242, 244, 250)',\n    }));\n\n    setGridItems(newGridItems);\n  }\n\n  function handleMouseEnter(id) {\n    const r = Math.floor(Math.random() * 255);\n    const g = Math.floor(Math.random() * 255);\n    const b = Math.floor(Math.random() * 255);\n    const newColor = `rgb(${r}, ${g}, ${b})`;\n\n    setGridItems((prevItems) =>\n      prevItems.map((item) =>\n        item.id === id ? { ...item, color: newColor } : item\n      )\n    );\n  }\n\n  function resizeSketch(newSize) {\n    if (newSize <= 1) {\n      console.log('Enter An Appropriate Number Larger than 0.');\n      return false;\n    } else {\n      const newGridSize = newSize * newSize;\n      setGridSize(newGridSize);\n    }\n  }\n\n  function clearGrid() {\n    setGridItems((prevItems) =>\n      prevItems.map((item) => ({ ...item, color: 'rgb(242, 244, 250)' }))\n    );\n  }\n\n  return (\n    <div className='bg-green mt-5 text-center'>\n      <h2>Randomized Sketch App</h2>\n      <div className='bg-grey'>\n        <div className='containerGrid mt-2'>\n          {gridItems.map((item) => (\n            <div\n              key={item.id}\n              className='gridbox'\n              style={{ backgroundColor: item.color }}\n              onMouseEnter={() => handleMouseEnter(item.id)}\n            />\n          ))}\n        </div>\n        <FormPopup resizeSketch={resizeSketch} />\n        <button className='clearButton' onClick={clearGrid}>\n          Clear Sketch\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default SketchApp;\n"],"names":["FormPopup","resizeSketch","useState","isOpen","setIsOpen","value","setValue","handleClose","className","onClick","id","onSubmit","e","preventDefault","Number","type","placeholder","onChange","target","required","gridSize","setGridSize","gridItems","setGridItems","useEffect","size","newGridItems","Array","from","length","_","index","color","createGridSize","map","item","style","backgroundColor","onMouseEnter","r","Math","floor","random","g","b","newColor","prevItems","handleMouseEnter","newSize","console","log"],"sourceRoot":""}